Problem 1: Matching a decimal numbers

^-?\d+(?:\.\d+)*(?:\,\d+\.\d+)*(?:e\d+)*$

Problem 2: Matching phone numbers

Capture Group
\s?\(?(\d{3})\)?

Full Phone Numbers
^1?\s?\(?(\d{3})\)?[-\s]?\d{3}[-\s]?\d{4}

Problem 3: Matching emails

^([\w.]+).*@.+$

Problem 4: Matching HTML

Capture Group
(\w+)

Problem 5: Matching specific filenames

Capture Group
^(\w+)\.(jpg|png|gif)$

Problem 6: Trimming whitespace from start and end of line

Capture Group
^\s*((\w+\s+){3,}\w+\.{0,3})$

JAVASCRIPT REGEX QUESTIONS-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Question 1.1:

const Ones = /[iIl|!\/]/g;
const Zeros = /[oO@Θθ]/g;

const input = "1I111θI1 100il010 01Θ00001 0IO1001l 111o000o i@0101@0 10θ/Olo1 0O111!O1 11O1/io0 0!101010 0/0o00Θ! 00Θ011i1 10|01@00 1110I1i0 0l0oII0i 000|l11/ I0111@01 010!@1/0 |oΘ0110| 11o010!@ 0011101o 10θ001/Θ ΘI1000i0 !i111O10 1/000101 !Θ0@0010 011/10I| oθ/1i11/ o101ii1i I/I01011 l/@θ00I1 o101oΘ1@ 1Iθ10110 0ioOooθ1 Θ10l1O0I 11i11O01 I1111θ00 i0l|1O01 001!1110 010I/00@ 111101θ0 θ1Θ1011o 0ΘO100Θ1 11110!I1 /00!i110 11l0111i 0100l@O0 /100l0@0 0ΘI@1|0l 00lθ1011 o/1/1110 1lΘ01O01 @Θ0@10|1 I0011111 1@1o001/ o01001o1 0o1Ii111 0θ1010θ1 0011|!|0 0|l11010 /1001l!/ 0oΘ111o0 |θI00000 00001i0@ 01Θ0I|I1 1I10l100 o|θ1111@ !0θl010I /I10I!00 10@@O0/1 1i0!0101 I10O|1|1 0o01@100 01100110 θ0001111 @oi0/I0l Θ11θ100i 0!o010@! 0!o011θl |0|0lθ01 01o0OΘ1@ @1111100 θl0/@110 O0000Θ11 @10Θ1Ii0 Oll!001@ 110!00/1 111l00O1 1Θ11|011 @Θ|0!0i0 θΘ1!0I11 0/θi11/0 100o|0θ1 I000Iθ01 0@1|I0@θ 0000Iio0 I010@010 0Ol0I1@1 01Oi10i0 i!/|!1i@";

const output = input.replace(Ones, "1").replace(Zeros, "0");

console.log(output);

Answer:


Question 1.2:

const Zero = /\b0{8}\b/g;
const One = /\b1[01]{7}\b/g;
const Two = /\b01[01]{6}\b/g;
const Three = /\b001[01]{5}\b/g;
const Four = /\b0001[01]{4}\b/g;
const Five = /\b00001[01]{3}\b/g;
const Six = /\b000001[01]{2}\b/g;
const Seven = /\b0000001[01]{1}\b/g;
const Eight = /\b00000001\b/g;

const input

let output = input
    .replace(Zero, "0")
    .replace(One, "1")
    .replace(Two, "2")
    .replace(Three, "3")
    .replace(Four, "4")
    .replace(Five, "5")
    .replace(Six, "6")
    .replace(Seven, "7")
    .replace(Eight, "8");

console.log(output);

Answer:

1 4 2 1 2 1 1 1 3 4 1 1 1 2 1 2 1 6 2 1 2 2 1 1 1 1 1 1 1 3 1 2 1 1 1 4 2 1 2 1 1 1 1 1 1 2 1 1 1 1 3 1 1 2 1 2 2 2 1 3 3 4 1 2 2 1 1 1 1 3 1 1 4 1 1 1 2 8 1 2 1 1 7 2 1 1 3 1 4 1 1 1 6 1 1 4 3 3 1 2

Question 1.3:

const Eight = /\b[01]{7}1\b/g;
const Seven = /\b[01]{6}1[01]\b/g;
const Six = /\b[01]{5}1[01]{2}\b/g;
const Five = /\b[01]{4}1[01]{3}\b/g;
const Four = /\b[01]{3}1[01]{4}\b/g;
const Three = /\b[01]{2}1[01]{5}\b/g;
const Two = /\b[01]{1}1[01]{6}\b/g;
const One = /\b1[01]{7}\b/g;
const Zero = /\b0{8}\b/g;

const input

let output = input
  .replace(Eight, "8")
  .replace(Seven, "7")
  .replace(Six, "6")
  .replace(Five, "5")
  .replace(Four, "4")
  .replace(Three, "3")
  .replace(Two, "2")
  .replace(One, "1")
  .replace(Zero, "0");

console.log(output);

Answer:
8 6 8 6 8 7 7 8 8 7 7 8 7 8 5 4 6 7 7 5 7 8 8 8 4 1 8 6 7 8 8 8 7 8 5 7 8 8 8 4 7 8 7 1 6 8 8 7 8 7 8 7 8 8 6 5 8 8 5 7 8 7 7 8 8 4 6 8 8 8 8 8 5 7 2 8 6 8 7 7 7 8 8 7 8 1 7 8 4 8 8 1 7 6 6 5 6 5 8 7

Question 1.4:

const Even = /\b[01]{7}0\b/g;

const input

let output = input
    .replace(Even, "")
    .replace(/\s+/g, ` `)

console.log(output);

Answer:
11010001 01000111 01101101 11100101 00101101 11011011 01111101 01011101 11101011 11010101 11001001 00100101 11001111 01001101 10001011 01011011 10110011 01110111 11010001 01110101 10111101 11110111 00110011 10110011 01101101 01100011 01011111 00110101 01000001 01111111 11110011 10010111 00100101 10011011 11111111 10001011 00000001 10100101 00000011 10110111 11110011 11101111 11011111 11001111

Question 1.5:

const Change = /\b1[01]{7}\b/g;
const input

const output = input.replace(Change, function(number) {
  const rightMost = number.lastIndexOf('1'); //find last 1 (least significant)
  let result = '';

  for (let i = 0; i < number.length; i++) { //loop through each byte
    if (i < rightMost) { //for numbers before the rightmost 1
      if (number[i] === '0') { // if 0, swap to 1
        result += '1';
      } else if (number[i] === '1') { // if 1, swap to 0
        result += '0';
      }
    } else {
      result += number[i];
    }
  }

  //if super rare case of the rightmost 1 being the first number
  if (result[0] === '1') {
    result = result.replace(/^1/, '0');
  }

  return result;
});

console.log(output);

Answer:

